name: Plugin - Deploy to AKS

on:
  workflow_call:
    inputs:
      NAMESPACE:
        required: true
        type: string
      IMAGE_TAG:
        required: true
        type: string
      STAGING:
        required: false
        type: boolean
        default: false
    secrets:
      AZURE_CREDENTIALS:
        required: true
      ACR_USERNAME:
        required: true
      ACR_PASSWORD:
        required: true
      ACR_LOGIN_SERVER:
        required: true
      EMAIL_USER:
        required: true
      EMAIL_PASSWORD:
        required: true

env:
  RESOURCE_GROUP: sit722devopsteddy-rg
  AKS_NAME: sit722devopsteddy-aks

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Connect to AKS
        run: az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME

      - name: Create Namespace
        run: kubectl create namespace ${{ inputs.NAMESPACE }} || echo "Namespace exists"

      - name: Deploy Backend Services
        run: |
          # Deploy Product Service
          SERVICE_PORT=8000
          TYPE=LoadBalancer
          if [ "${{ inputs.STAGING }}" = "true" ]; then TYPE=ClusterIP; fi

          kubectl create deployment product-service \
            --image=$ACR_LOGIN_SERVER/product_service:${{ inputs.IMAGE_TAG }} \
            -n ${{ inputs.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

          kubectl expose deployment product-service \
            --type=$TYPE \
            --port=$SERVICE_PORT \
            --target-port=8000 \
            --name=product-service \
            -n ${{ inputs.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

          kubectl label deployment product-service app=product-service -n ${{ inputs.NAMESPACE }} --overwrite
          kubectl set image deployment/product-service *=$ACR_LOGIN_SERVER/product_service:${{ inputs.IMAGE_TAG }} -n ${{ inputs.NAMESPACE }}

          # Deploy Order Service  
          SERVICE_PORT=8001
          kubectl create deployment order-service \
            --image=$ACR_LOGIN_SERVER/order_service:${{ inputs.IMAGE_TAG }} \
            -n ${{ inputs.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

          kubectl expose deployment order-service \
            --type=$TYPE \
            --port=$SERVICE_PORT \
            --target-port=8000 \
            --name=order-service \
            -n ${{ inputs.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

          kubectl label deployment order-service app=order-service -n ${{ inputs.NAMESPACE }} --overwrite
          kubectl set image deployment/order-service *=$ACR_LOGIN_SERVER/order_service:${{ inputs.IMAGE_TAG }} -n ${{ inputs.NAMESPACE }}

      - name: Wait for Backend Deployments
        run: |
          for dep in $(kubectl get deployments -n ${{ inputs.NAMESPACE }} -o jsonpath='{.items[*].metadata.name}'); do
            kubectl rollout status deployment/$dep -n ${{ inputs.NAMESPACE }} --timeout=300s
            kubectl wait --for=condition=Ready pod -l app=$dep -n ${{ inputs.NAMESPACE }} --timeout=180s
          done

      - name: Deploy Frontend
        run: |
          docker build -t $ACR_LOGIN_SERVER/frontend:${{ inputs.IMAGE_TAG }} frontend/
          echo ${{ secrets.ACR_PASSWORD }} | docker login $ACR_LOGIN_SERVER -u ${{ secrets.ACR_USERNAME }} --password-stdin
          docker push $ACR_LOGIN_SERVER/frontend:${{ inputs.IMAGE_TAG }}

          TYPE=LoadBalancer
          if [ "${{ inputs.STAGING }}" = "true" ]; then TYPE=ClusterIP; fi

          kubectl create deployment frontend \
            --image=$ACR_LOGIN_SERVER/frontend:${{ inputs.IMAGE_TAG }} \
            -n ${{ inputs.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

          kubectl expose deployment frontend \
            --port=80 \
            --target-port=80 \
            --type=$TYPE \
            --name=frontend \
            -n ${{ inputs.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

          kubectl label deployment frontend app=frontend -n ${{ inputs.NAMESPACE }} --overwrite
          kubectl set image deployment/frontend *=$ACR_LOGIN_SERVER/frontend:${{ inputs.IMAGE_TAG }} -n ${{ inputs.NAMESPACE }}

      - name: Wait for Frontend Deployment
        run: kubectl rollout status deployment/frontend -n ${{ inputs.NAMESPACE }} --timeout=300s

      - name: Log Service External IPs
        run: |
          echo "üåê Checking service IPs in namespace ${{ inputs.NAMESPACE }}..."
          for svc in frontend order-service product-service; do
            TYPE=$(kubectl get svc $svc -n ${{ inputs.NAMESPACE }} -o jsonpath='{.spec.type}')
            if [ "$TYPE" = "LoadBalancer" ]; then
              EXTERNAL_IP=""
              while [ -z "$EXTERNAL_IP" ]; do
                EXTERNAL_IP=$(kubectl get svc $svc -n ${{ inputs.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                [ -z "$EXTERNAL_IP" ] && echo "Waiting for $svc external IP..." && sleep 5
              done
              echo "‚úÖ $svc LoadBalancer IP: $EXTERNAL_IP"
            else
              echo "‚ÑπÔ∏è $svc is ClusterIP only"
            fi
          done

  post-deploy-integration-tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Connect to AKS
        run: az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: |
          cd util
          npm ci

      - name: Wait for Services to be Ready
        run: |
          NAMESPACE="${{ inputs.NAMESPACE }}"
          for svc in product-service order-service frontend; do
            echo "üîç Checking pods for service: $svc"
            kubectl get pods -n $NAMESPACE -l app=$svc
            POD=$(kubectl get pods -n $NAMESPACE -l app=$svc -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
            if [ -n "$POD" ]; then
              echo "‚è≥ Waiting for pod $POD to be ready..."
              kubectl wait --for=condition=Ready pod/$POD -n $NAMESPACE --timeout=180s
            else
              echo "‚ùå No pods found for service $svc"
              kubectl get pods -n $NAMESPACE
            fi
          done

      - name: Debug Pod and Service Status
        run: |
          NAMESPACE="${{ inputs.NAMESPACE }}"
          echo "üîç Debugging services and pods..."
          kubectl get svc -n $NAMESPACE
          kubectl get pods -n $NAMESPACE -o wide
          kubectl get endpoints -n $NAMESPACE

      - name: Setup Port Forwarding with Better Error Handling
        run: |
          NAMESPACE="${{ inputs.NAMESPACE }}"

          # Function to setup port forward with retry
          setup_port_forward() {
            local service=$1
            local local_port=$2
            local service_port=$3
            
            echo "üöÄ Setting up port forward for $service: localhost:$local_port -> service:$service_port"
            
            # Kill any existing port forwards on this port
            pkill -f "port-forward.*:$local_port" || true
            
            # Start port forwarding in background
            kubectl port-forward svc/$service $local_port:$service_port -n $NAMESPACE &
            PID=$!
            
            # Wait and test connection
            sleep 3
            if kill -0 $PID 2>/dev/null; then
              echo "‚úÖ Port forward for $service established (PID: $PID)"
            else
              echo "‚ùå Port forward for $service failed"
              return 1
            fi
          }

          # Setup port forwards with correct service ports
          setup_port_forward "product-service" "18000" "8000"
          setup_port_forward "order-service" "18001" "8001" 
          setup_port_forward "frontend" "18002" "80"

          echo "‚è≥ Waiting 10 seconds for port forwards to stabilize..."
          sleep 10

      - name: Test Service Connectivity
        run: |
          echo "üß™ Testing service connectivity..."

          test_endpoint() {
            local name=$1
            local url=$2
            local expected_status=${3:-200}
            
            echo "Testing $name at $url"
            for i in {1..10}; do
              if curl -f -s --max-time 5 "$url" >/dev/null 2>&1; then
                echo "‚úÖ $name is responding"
                return 0
              else
                echo "‚è≥ Attempt $i/10: $name not ready, retrying in 2s..."
                sleep 2
              fi
            done
            echo "‚ùå $name failed to respond after 10 attempts"
            return 1
          }

          # Test each service
          test_endpoint "Product Service Health" "http://localhost:18000/health"
          test_endpoint "Order Service Health" "http://localhost:18001/health" 
          test_endpoint "Frontend" "http://localhost:18002/" 200

      - name: Export Service URLs and Run Tests
        run: |
          export PRODUCT_API_IP="http://localhost:18000"
          export ORDER_API_IP="http://localhost:18001"
          export FRONTEND_URL="http://localhost:18002"

          echo "üîó Final service URLs:"
          echo "Product API: $PRODUCT_API_IP"
          echo "Order API: $ORDER_API_IP" 
          echo "Frontend: $FRONTEND_URL"

          cd util
          npm test --testTimeout=30000

      - name: Cleanup Port Forwards
        if: always()
        run: |
          echo "üßπ Cleaning up port forwards..."
          pkill -f "kubectl port-forward" || true

  notify-email:
    needs: post-deploy-integration-tests
    uses: ./.github/workflows/plugin-send-email.yml
    with:
      email_to: "teddyhiny@gmail.com"
      email_subject: ${{ needs.deploy.result == 'success' && 'Deployment Succeeded' || 'Deployment Failed' }}
      email_body: |
        Deployment to namespace ${{ inputs.NAMESPACE }} has completed.
        Status: ${{ needs.deploy.result }}
        Image Tag: ${{ inputs.IMAGE_TAG }}
        Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    secrets:
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
