name: Stage1 - CI Pipeline - Staging Branch

on:
  workflow_dispatch:
  push:
    branches: [staging]

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  # ---------------------------------------
  # 1️⃣ Test Backend Services
  # ---------------------------------------
  test-backend-services:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    strategy:
      matrix:
        service: [order_service, product_service]

    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Create databases if missing
        run: |
          for db in orders products; do
            psql postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/postgres \
              -tc "SELECT 1 FROM pg_database WHERE datname = '$db'" | grep -q 1 || \
              psql postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/postgres \
              -c "CREATE DATABASE $db;"
          done

      - name: Install dependencies
        run: |
          cd backend/${{ matrix.service }}
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Set DATABASE_URL
        run: |
          if [ "${{ matrix.service }}" = "order_service" ]; then
            echo "DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/orders" >> $GITHUB_ENV
          else
            echo "DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/products" >> $GITHUB_ENV
          fi

      - name: Run tests
        run: |
          cd backend/${{ matrix.service }}
          python -m pytest tests/ -v

  # ---------------------------------------
  # 2️⃣ Build Docker Images
  # ---------------------------------------
  build-docker-images:
    needs: test-backend-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [order_service, product_service, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Docker Hub
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            cd frontend
          else
            cd backend/${{ matrix.service }}
          fi
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ matrix.service }}:${{ github.sha }} .

  # ---------------------------------------
  # 3️⃣ Scan Docker Images (Reusable Workflow)
  # ---------------------------------------
  docker-scout-scan:
    needs: build-docker-images
    uses: ./.github/workflows/plugin-docker-scout-scan.yml
    strategy:
      matrix:
        service: [order_service, product_service, frontend]
    with:
      IMAGE_NAME: ${{ env.ACR_LOGIN_SERVER }}/${{ matrix.service }}
      IMAGE_TAG: ${{ github.sha }}
    secrets:
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

  # ---------------------------------------
  # 4️⃣ Push Docker Images to ACR
  # ---------------------------------------
  push-to-acr:
    needs: docker-scout-scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [order_service, product_service, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to ACR
        run: |
          echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ env.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

      - name: Push Docker image
        run: |
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ matrix.service }}:${{ github.sha }}
          docker tag ${{ env.ACR_LOGIN_SERVER }}/${{ matrix.service }}:${{ github.sha }} ${{ env.ACR_LOGIN_SERVER }}/${{ matrix.service }}:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ matrix.service }}:latest

  # ---------------------------------------
  # 5️⃣ Notify via Email on Failure
  # ---------------------------------------
  notify-email:
    needs: push-to-acr
    if: ${{ needs.push-to-acr.result != 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Email Notification
        uses: ./.github/workflows/send-email.yml
        with:
          email_to: "teddyhiny@gmail.com"
          email_subject: "CI Pipeline Failed on Staging Branch"
          email_body: |
            CI Pipeline for branch staging has failed.
            Commit: ${{ github.sha }}
            Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
